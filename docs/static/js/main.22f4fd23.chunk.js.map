{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","quotes","text","author","Quote","className","id","this","props","quote","React","Component","QuoteButton","onClick","getQuote","TweetButton","encodedQuote","bind","encodeURIComponent","href","aria-label","QuoteBox","state","currentQuote","getRandomQuote","setRandomQuote","Math","floor","random","length","setState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCbAC,EAAS,CACd,CACCC,KAAM,wEACNC,OAAQ,kBAET,CACCD,KAAM,wCACNC,OAAQ,eAET,CACCD,KAAM,4GACNC,OAAQ,kBAET,CACCD,KAAM,qBACNC,OAAQ,qBAET,CACCD,KAAM,8CACNC,OAAQ,kBAET,CACCD,KAAM,qEACNC,OAAQ,kBAET,CACCD,KAAM,qDACNC,OAAQ,eAET,CACCD,KAAM,0BACNC,OAAQ,YAET,CACCD,KAAM,2DACNC,OAAQ,SAET,CACCD,KAAM,kCACNC,OAAQ,SAIJC,E,iLAEJ,OACC,yBAAKC,UAAU,OACd,uBAAGC,GAAG,QAAQC,KAAKC,MAAMC,MAAMP,MAC/B,uBAAGI,GAAG,UAAUC,KAAKC,MAAMC,MAAMN,a,GALjBO,IAAMC,WAWpBC,E,iLAEJ,OACC,4BAAQN,GAAG,YAAYO,QAASN,KAAKC,MAAMM,UAAW,mB,GAH/BJ,IAAMC,WAQ1BI,E,YACL,WAAYP,GAAQ,IAAD,8BAClB,4CAAMA,KACDQ,aAAe,EAAKA,aAAaC,KAAlB,gBAFF,E,4EAMlB,OAAOC,mBAAmB,IAAMX,KAAKC,MAAMC,MAAMP,KAAO,KAAOK,KAAKC,MAAMC,MAAMN,U,+BAGhF,OACC,uBAAGgB,KAAM,8EAA8EZ,KAAKS,eAAgBV,GAAG,cAAcc,aAAW,oBACvI,iC,GAZsBV,IAAMC,WAkB1BU,E,YACL,WAAYb,GAAQ,IAAD,8BAClB,4CAAMA,KACDc,MAAQ,CACZC,aAAc,EAAKC,kBAEpB,EAAKC,eAAiB,EAAKA,eAAeR,KAApB,gBALJ,E,8EASlB,OAAOhB,EAAOyB,KAAKC,MAAMD,KAAKE,UAAY3B,EAAO4B,OAAO,O,uCAIxDtB,KAAKuB,SAAS,CACbP,aAAchB,KAAKiB,qB,+BAKpB,OACC,yBAAKlB,GAAG,aACP,kBAAC,EAAD,CAAOG,MAAOF,KAAKe,MAAMC,eACzB,yBAAKlB,UAAU,WACd,kBAAC,EAAD,CAAaS,SAAUP,KAAKkB,iBAC5B,kBAAC,EAAD,CAAahB,MAAOF,KAAKe,MAAMC,qB,GAzBbb,IAAMC,WAgC7BoB,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SDchD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.22f4fd23.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst quotes = [\n\t{\n\t\ttext: \"But I was going into Tosche Station to pick up some power converters!\",\n\t\tauthor: \"Luke Skywalker\"\n\t},\n\t{\n\t\ttext: \"I find your lack of faith disturbing.\",\n\t\tauthor: \"Darth Vader\"\n\t},\n\t{\n\t\ttext: \"You don’t need to see his identification… These aren’t the droids you’re looking for.\",\n\t\tauthor: \"Obi-Wan Kenobi\"\n\t},\n\t{\n\t\ttext: \"Cover me, Porkins!\",\n\t\tauthor: \"Biggs Darklighter\"\n\t},\n\t{\n\t\ttext: \"An elegant weapon for a more civilized age.\",\n\t\tauthor: \"Obi-Wan Kenobi\"\n\t},\n\t{\n\t\ttext: \"Who’s the more foolish? The fool or the fool who follows him?\",\n\t\tauthor: \"Obi-Wan Kenobi\"\n\t},\n\t{\n\t\ttext: \"Aren’t you a little short for a stormtrooper?\",\n\t\tauthor: \"Leia Organa\"\n\t},\n\t{\n\t\ttext: \"Never tell me the odds.\",\n\t\tauthor: \"Han Solo\"\n\t},\n\t{\n\t\ttext: \"We seem to be made to suffer. It’s our lot in life.\",\n\t\tauthor: \"C-3PO\"\n\t},\n\t{\n\t\ttext: \"Do. Or do not. There is no try.\",\n\t\tauthor: \"Yoda\"\n\t}\n];\n\nclass Quote extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"box\">\n\t\t\t\t<p id=\"text\">{this.props.quote.text}</p>\n\t\t\t\t<p id=\"author\">{this.props.quote.author}</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass QuoteButton extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<button id=\"new-quote\" onClick={this.props.getQuote}>{'A New Quote'}</button>\n\t\t);\n\t}\n}\n\nclass TweetButton extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.encodedQuote = this.encodedQuote.bind(this);\n\t}\n\n\tencodedQuote() {\n\t\treturn encodeURIComponent('\"' + this.props.quote.text + '\" ' + this.props.quote.author);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<a href={'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text='+this.encodedQuote()} id=\"tweet-quote\" aria-label=\"Tweet this quote\">\n\t\t\t\t<i></i>\n\t\t\t</a>\n\t\t);\n\t}\n}\n\nclass QuoteBox extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentQuote: this.getRandomQuote()\n\t\t};\n\t\tthis.setRandomQuote = this.setRandomQuote.bind(this);\n\t}\n\n\tgetRandomQuote() {\n\t\treturn quotes[Math.floor(Math.random() * (quotes.length-1))];\n\t}\n\n\tsetRandomQuote() {\n\t\tthis.setState({\n\t\t\tcurrentQuote: this.getRandomQuote()\n\t\t});\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div id=\"quote-box\">\n\t\t\t\t<Quote quote={this.state.currentQuote} />\n\t\t\t\t<div className=\"buttons\">\n\t\t\t\t\t<QuoteButton getQuote={this.setRandomQuote} />\n\t\t\t\t\t<TweetButton quote={this.state.currentQuote}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nReactDOM.render(<QuoteBox />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}